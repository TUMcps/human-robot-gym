ARG MODE=root

# We use the if else method as described here: https://stackoverflow.com/a/60820156/13397059
FROM continuumio/miniconda3 as base
ARG DEBIAN_FRONTEND=noninteractive

SHELL ["/bin/bash", "--login", "-c"]

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

RUN apt-get update --fix-missing && \
    apt-get install --no-install-recommends -y \
        tzdata \
        dirmngr \
        gnupg2 \
        psmisc \
        python3.6 \
        python3-pip \
        python-is-python3 \
        mpich \
        python3-tk \
        python3-dev \
        libosmesa6-dev \
        libgl1-mesa-glx \
        libglfw3 \
        apt-utils dialog 2>&1 \
        git \
        iproute2 \
        procps \
        lsb-release \
        nano \
        libopenmpi-dev \
        swig \
        wget \
        ca-certificates \
        curl \
        git \
        bzip2 \
        sudo \
        cmake \
        build-essential \
        tar \
        unzip \
        curl \
        g++ \
        gcc-9 \
        clang \
        libgtest-dev \
        libgmock-dev \
        patchelf \
        liboctomap-dev \
        python3-sphinx

RUN apt-get upgrade libstdc++6 -y
RUN apt-get dist-upgrade

RUN apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

ENV DEBIAN_FRONTEND=dialog

# Pull and install eigen
RUN curl -LJO https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.bz2 && \
    tar -xvf eigen-3.4.0.tar.bz2 && \
    rm eigen-3.4.0.tar.bz2

WORKDIR /eigen-3.4.0/build
RUN cmake .. && make install

#-------------------------------------------------------------------------------------------------------------
# User docker
#-------------------------------------------------------------------------------------------------------------
FROM base as branch-user

ARG USERNAME=robot
ARG USER_UID=1000
ARG USER_GID=$USER_UID
RUN groupadd --gid $USER_GID $USERNAME && \
    useradd --create-home --no-log-init --uid $USER_UID --gid $USER_GID $USERNAME

# ARG is scoped -> has to be set as environment variable
ENV HOME_PATH=/home/$USERNAME
USER $USERNAME
RUN conda init bash

#-------------------------------------------------------------------------------------------------------------
# Root docker
#-------------------------------------------------------------------------------------------------------------
FROM base as branch-root

ARG USERNAME=root
ENV HOME_PATH=/root

#-------------------------------------------------------------------------------------------------------------
# Final docker
#-------------------------------------------------------------------------------------------------------------
FROM branch-${MODE} AS final

# Pull mujoco
RUN mkdir $HOME_PATH/.mujoco
WORKDIR $HOME_PATH/.mujoco
RUN curl -LJO https://mujoco.org/download/mujoco210-linux-x86_64.tar.gz && \
    tar -xvf mujoco210-linux-x86_64.tar.gz && \
    rm mujoco210-linux-x86_64.tar.gz

RUN echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME_PATH/.mujoco/mujoco210/bin" >> $HOME_PATH/.bashrc

WORKDIR $HOME_PATH

ARG USERNAME=root

# Create environment
COPY --chown=$USERNAME environment.yml ./
RUN conda env create -f environment.yml && \
    echo "conda activate hrgym" >> $HOME_PATH/.bashrc

# Build SaRA shield
COPY --chown=$USERNAME human_robot_gym/controllers/failsafe_controller/sara-shield ./sara-shield
WORKDIR $HOME_PATH/sara-shield
RUN rm -rf build && \
    rm -rf safety_shield/build

# Change shell to have an activated conda environment
# Otherwise, $(which python) will point to the wrong executable
# See https://pythonspeed.com/articles/activate-conda-dockerfile/
SHELL ["conda", "run", "--no-capture-output", "-n", "hrgym", "/bin/bash", "-c"]
RUN export EIGEN3_INCLUDE_DIR="/eigen-3.4.0" && \
    python setup.py install

WORKDIR $HOME_PATH
SHELL ["/bin/bash", "-c"]

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["cd human-robot-gym; conda run --no-capture-output -n hrgym pip install -e .; /bin/bash"]
