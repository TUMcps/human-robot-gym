Human Animations
=================

We currently do not have a reactive human simulation but use a playback animation system.
There are a couple of human animations converted from the `CMU motion capture data set <http://mocap.cs.cmu.edu/>`_.
In addition to that, we recorded task-specific animations in our lab.
All available human animation names are contained in a `subrepository <https://github.com/JakobThumm/human-robot-animations/>`_ at ``human_robot_gym/models/assets/human/animations/human-robot-animations``.


Processing Pipeline
-------------------

A detailed description of how to record new data can be found `here (access required) <https://gitlab.lrz.de/cps-robotics/modular-robot-toolbox/-/wikis/Real%20Robot%20Setup/5.%20Recording%20Vicon%20Data>`_.
The `animation subrepository <https://github.com/JakobThumm/human-robot-animations/>`_ also contains scripts for converting animation data collected via our Vicon tracker system to pickled files in the required format.
In this process, ``.csv`` files generated by the Vicon system are first converted into ``.bvh`` files and then into ``.pkl`` files.
For more information on the conversion process, see the `README <https://github.com/JakobThumm/human-robot-animations/blob/main/README.md>`_ in the subrepository.

In some cases, the conversion pipeline may distort the original motion. For instance, the extended hand in certain ``RobotHumanHandover`` animations would face down instead of up after processing.
Because of that, we provide the ``bvh_rotate_palm_up.py`` script in ``human_robot_gym/utils``.
This script can be used to add a manual rotation offset to the ``.bvh`` files before converting them to ``.pkl`` files.
To do so, run

.. code-block:: bash

    python human_robot_gym/utils/bvh_rotate_palm_up path/to/bvh/file.bvh -i -j left_hand -a 100

where ``-i`` indicates that the ``.bvh`` file should be modified in-place (as opposed to specifying a save path with ``-s``),
``-j`` indicates which hand the offset should be applied to (can be either of ``left_hand`` or ``right_hand``),
and ``-a`` specifies the angle offset in degrees.


Animation Looping
-----------------

To generate a certain degree of interactability, we use a looping mechanism for the animations.
Specifically, we use a combination of sine waves to transform the animation time.
This way the animation can be alternately played back forward and backward.
The transformation of the animation time can be expressed as

.. math::
    m(t; t_0, \vec{A}, \vec{S}) = t_0 + \sum_{i=1}^{D} A_i \cdot sin\left((t-t_0) \cdot \frac{S_i}{A_i}\right)\,,

where :math:`t` is the original animation time, :math:`t_0` is the anchor point around which the sine waves revolve, :math:`\vec{A}` is a :math:`D`-dimensional vector of amplitudes, and :math:`\vec{S}` is a :math:`D`-dimensional vector of speed modifiers.
If :math:`\sum_{i=0}^{D} S_i = 1`, the transition between the linear and the sine-wave-transformed animation time at :math:`t_0` is differentiable. :math:`\vec{A}` gives the amplitudes of the sine waves.
To add randomization, the parameters :math:`\vec{A}` and :math:`\vec{S}` are perturbed by factors :math:`r` sampled from a clipped log-normal distribution:

.. math::
    r(\eta) = \eta^{clip(\nu, -\epsilon,\epsilon)},\quad \nu \sim \mathcal{N}(0,1)\,,

where :math:`\eta` is the base of the log-normal distribution and :math:`\epsilon` is a clipping value.
The final parameters are calculated as

.. math::
    \vec{A} = \vec{\hat{A}} \cdot r(\eta_A)\,,\quad \vec{S} = \vec{\hat{S}} \cdot r(\eta_S)\,.

The parameters :math:`\vec{\hat{A}}` and :math:`\vec{\hat{S}}` are the original parameters before perturbation.
:math:`\vec{\hat{A}}`, :math:`\vec{\hat{S}}`, :math:`\eta_A`, and :math:`\eta_S` are specified by the user.


Environment Parameters
----------------------

The ``HumanEnv`` currently supports the following options for the human animations:

    - ``human_animation_names (List[str])``: Human animations to play (must match the files in ``human_robot_gym/models/assets/human/animations/human-robot-animations``)
    - ``base_human_pos_offset (List[float])``: Base human animation offset (offset for **all** animations)
    - ``human_animation_freq (float)``: Speed of the human animation in FPS (must be adapted to the animation type CMU, custom recording).
    - ``human_rand (List[float])``: Max. randomization of the human [x-pos, y-pos, z-angle (rad)]


Animation Info
--------------

Certain high-level information (e.g., starting position and orientation) can be adapted on a per-animation-clip basis.
This is achieved by accompanying animation files ``my_animation.pkl`` with JSON files named ``my_animation_info.json``.
If an info file is missing, an exception is raised.


All ``HumanEnv`` environments currently support the following animation info options:

    - ``position_offset (Tuple[float, float, float])``: An offset of the human in the Cartesian coordinate directions.
    - ``orientation_quat (Tuple[float, float, float, float])``: A rotation offset for the human given as a quaternion (x, y, z, w).

The descendants of this class support additional options. These may for example be used to specify the hand of the human that should hold or receive an object.
Other examples are keyframes and looping parameters for the animation (see above). In the following, we list the additional options for each environment.

HumanReach
^^^^^^^^^^

No additional options.

PickPlaceHuman
^^^^^^^^^^^^^^

No additional options.

ObjectInspection
^^^^^^^^^^^^^^^^

    - ``target_pos (Tuple[float, float, float])``: The position of the inspection window relative to the human in Cartesian space.
    - ``keyframes (Dict[str, float])``:

        - ``wait_phase_start (float)``: The frame in the animation that marks the start of the ``READY`` phase.
        - ``retreat_phase_start (float)``: The frame in the animation that marks the start of the ``RETREAT`` phase.
    - ``loop_amplitudes (Dict[str, List[float]])``: Parameters :math:`\vec{\hat{A}}`
    
        - ``wait_phase (List[float])``: Amplitudes of the sine waves by which the animation time is transformed during the ``INSPECTION`` phase.
    - ``loop_speeds (Dict[str, List[float]])`` Parameters :math:`\vec{\hat{S}}`
    
        - ``wait_phase (List[float])``: Speed modifiers for the sine waves by which the animation time is transformed during the ``INSPECTION`` phase. List has the same number of elements as the corresponding list of amplitudes.
    - ``loop_amplitude_std_factor (float)``: Parameter :math:`\eta_A`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_amplitudes``. The sampled factors are multiplied with the ``loop_amplitudes``.
    - ``loop_speed_std_factor (float)``: Parameter :math:`\eta_S`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_speeds``. The sampled factors are multiplied with the ``loop_speeds``.

RobotHumanHandover
^^^^^^^^^^^^^^^^^^

    - ``object_holding_hand (str)``: Specifies which hand the human should receive the object. Can be either ``left`` or ``right``.
    - ``keyframes (Dict[str, float])``:
    
        - ``reach_out_phase_start (float)``: The frame in the animation that marks the start of the ``REACH_OUT`` phase.
        - ``retreat_phase_start (float)``: The frame in the animation that marks the start of the ``RETREAT`` phase.
    - ``loop_amplitudes (List[float])``: Parameters :math:`\vec{\hat{A}}`
    
        - ``reach_out_phase (List[float])``: Amplitudes of the sine waves by which the animation time is transformed during the ``REACH_OUT`` phase.
    - ``loop_speeds (List[float])``: Parameters :math:`\vec{\hat{S}}`
    
        - ``reach_out_phase (List[float])``: Speed modifiers for the sine waves by which the animation time is transformed during the ``REACH_OUT`` phase. List has the same number of elements as the corresponding list of amplitudes.
    - ``loop_amplitude_std_factor (float)``: Parameter :math:`\eta_A`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_amplitudes``. The sampled factors are multiplied with the ``loop_amplitudes``.
    - ``loop_speed_std_factor (float)``: Parameter :math:`\eta_S`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_speeds``. The sampled factors are multiplied with the ``loop_speeds``.


HumanRobotHandover
^^^^^^^^^^^^^^^^^^

    - ``object_holding_hand (str)``: Specifies in which hand the human should hold the object in the beginning of the task. Can be either ``left`` or ``right``.
    - ``keyframes (Dict[str, float])``:
    
        - ``present_phase_start (float)``: The frame in the animation that marks the start of the ``PRESENT`` phase.
        - ``wait_phase_anchor (float)``: The frame in the animation which the ``WAIT`` phase is centered around. The sine waves by which the animation time is transformed during the ``WAIT`` phase revolve around this frame.
    - ``loop_amplitudes (Dict[str, List[float]])``:  Parameters :math:`\vec{\hat{A}}`
    
        - ``present_phase (List[float])``: Amplitudes of the sine waves by which the animation time is transformed during the ``PRESENT`` phase.
        - ``wait_phase (List[float])``: Amplitudes of the sine waves by which the animation time is transformed during the ``WAIT`` phase.
    - ``loop_speeds (Dict[str, List[float]])``: Parameters :math:`\vec{\hat{S}}`
    
        - ``present_phase (List[float])``: Speed modifiers for the sine waves by which the animation time is transformed during the ``PRESENT`` phase. List has the same number of elements as the corresponding list of amplitudes.
        - ``wait_phase (List[float])``: Speed modifiers for the sine waves by which the animation time is transformed during the ``WAIT`` phase. List has the same number of elements as the corresponding list of amplitudes.
    - ``loop_amplitude_std_factor (float)``: Parameter :math:`\eta_A`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_amplitudes``. The sampled factors are multiplied with the ``loop_amplitudes``.
    - ``loop_speed_std_factor (float)``: Parameter :math:`\eta_S`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_speeds``. The sampled factors are multiplied with the ``loop_speeds``. 

CollaborativeLifting
^^^^^^^^^^^^^^^^^^^^

No additional options.


CollaborativeHammering
^^^^^^^^^^^^^^^^^^^^^^

    - ``keyframes (Dict[str, float])``
    
        - ``present_phase_start (float)``: The frame in the animation that marks the start of the ``PRESENT`` phase.
        - ``retreat_phase_start (float)``: The frame in the animation that marks the start of the ``RETREAT`` phase.
    - ``loop_amplitudes (Dict[str, List[float]])``: Parameters :math:`\vec{\hat{A}}`
    
        - ``present_phase (List[float])``: Amplitudes of the sine waves by which the animation time is transformed during the ``PRESENT`` phase.
    - ``loop_speeds (Dict[str, List[float]])``: Parameters :math:`\vec{\hat{S}}`
    
        - ``present_phase (List[float])``: Speed modifiers for the sine waves by which the animation time is transformed during the ``PRESENT`` phase. List has the same number of elements as the corresponding list of amplitudes.
    - ``loop_amplitude_std_factor (float)``: Parameter :math:`\eta_A`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_amplitudes``. The sampled factors are multiplied with the ``loop_amplitudes``.
    - ``loop_speed_std_factor (float)``: Parameter :math:`\eta_S`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_speeds``. The sampled factors are multiplied with the ``loop_speeds``.

CollaborativeStacking
^^^^^^^^^^^^^^^^^^^^^

    - ``first_placing_hand (str)``: Specifies which hand the human should use to place the first object. Can be either ``left`` or ``right``.
    - ``keyframes (Dict[str, float])``:
    
        - ``place_first_phase_start (float)``: Marks the transition between the ``APPROACH`` and ``PLACE_FIRST`` phases.
        - ``wait_for_second_phase_start (float)``: Frame at which the human should place the first block and transition to the ``WAIT_FOR_SECOND`` phase.
        - ``wait_for_second_phase_anchor (float)``: Frame at which the ``WAIT_FOR_SECOND`` phase is centered around. The sine waves by which the animation time is transformed during the ``WAIT_FOR_SECOND`` phase revolve around this frame.
        - ``wait_for_fourth_phase_start (float)``: Frame at which the human should place the second block and transition to the ``WAIT_FOR_FOURTH`` phase.
        - ``wait_for_fourth_phase_anchor (float)``: Frame at which the ``WAIT_FOR_FOURTH`` phase is centered around. The sine waves by which the animation time is transformed during the ``WAIT_FOR_FOURTH`` phase revolve around this frame.
    - ``loop_amplitudes (Dict[str, List[float]])``: Parameters :math:`\vec{\hat{A}}`
    
        - ``wait_for_second_phase (List[float])``: Amplitudes of the sine waves by which the animation time is transformed during the ``WAIT_FOR_SECOND`` phase.
        - ``wait_for_fourth_phase (List[float])``: Amplitudes of the sine waves by which the animation time is transformed during the ``WAIT_FOR_FOURTH`` phase.
    - ``loop_speeds (List[float])``: Parameters :math:`\vec{\hat{S}}`
    
        - ``wait_for_second_phase (List[float])``: Speed modifiers for the sine waves by which the animation time is transformed during the ``WAIT_FOR_SECOND`` phase. List has the same number of elements as the corresponding list of amplitudes.
        - ``wait_for_fourth_phase (List[float])``: Speed modifiers for the sine waves by which the animation time is transformed during the ``WAIT_FOR_FOURTH`` phase. List has the same number of elements as the corresponding list of amplitudes.
    - ``loop_amplitude_std_factor (float)``: Parameter :math:`\eta_A`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_amplitudes``. The sampled factors are multiplied with the ``loop_amplitudes``.
    - ``loop_speed_std_factor (float)``: Parameter :math:`\eta_S`. Base of the log-normal distribution according to which factors are sampled to perturb the ``loop_speeds``. The sampled factors are multiplied with the ``loop_speeds``. 

